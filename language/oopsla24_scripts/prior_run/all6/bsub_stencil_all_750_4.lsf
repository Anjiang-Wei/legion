#!/bin/bash
#BSUB -W 240
#BSUB -alloc_flags atsdisable

n=$(( ($LSB_DJOB_NUMPROC - 1) / 40))
numgpus=4

echo Num nodes: $numnodes
echo Job id: $LSB_JOBID

module load gcc/7.3.1
module load cmake/3.14.5
module load cuda/11.7.0

root_dir="$PWD"
export LD_LIBRARY_PATH="$PWD"

repeat=20

run() {
  local domain_x=$1;
  local domain_y=$2;
  local tile=$3;
  local part_x=$4;
  local part_y=$5;
  local c_o=$6; # chapel or our
  local dim=$7; # 1D-block or 2D-block

  local oricmd=" -tsteps 50 -tprune 30 -hl:sched 1024 -ll:gpu ${numgpus} -ll:util 1 -ll:bgwork 2 -ll:csize 150000 -ll:fsize 15000 -ll:zsize 2048 -ll:rsize 512 -ll:gsize 0 -level 5 -dm:replicate 1 -dm:same_address_space -dm:memoize -lg:no_fence_elision -lg:parallel_replay 2 "
  if [ "$dim" -eq 2 ]; then
    oricmd="$oricmd -blockmapper ${part_x}"
  fi

  local logcmd=$oricmd" -wrapper -level mapper=debug -logfile wrapper_${domain_x}_${domain_y}_${tile}_${part_x}_${part_y}_${c_o}_${dim}_%.wrapper -lg:prof ${n} -lg:prof_logfile prof_${domain_x}_${domain_y}_${tile}_${part_x}_${part_y}_${c_o}_${dim}_%.gz "

  if [[ ! -d all_${n}_${domain_x}_${domain_y}_${tile} ]]; then mkdir all_${n}_${domain_x}_${domain_y}_${tile}; fi
  pushd all_${n}_${domain_x}_${domain_y}_${tile}

  echo $logcmd
  jsrun -b none -c ALL_CPUS -g ALL_GPUS -r 1 -n $n "$root_dir/stencil"  -nx $(( domain_x * ${tile} )) -ny $(( domain_y * ${tile} )) -ntx ${part_x} -nty ${part_y} $logcmd

  for (( r=1; r <= ${repeat}; r++)); do
    echo "Running all_${n}_${domain_x}_${domain_y}_${tile}_r${r}"
    jsrun -b none -c ALL_CPUS -g ALL_GPUS -r 1 -n $n "$root_dir/stencil"  -nx $(( domain_x * ${tile} )) -ny $(( domain_y * ${tile} )) -ntx ${part_x} -nty ${part_y} $oricmd | tee out_${domain_x}_${domain_y}_${tile}_${part_x}_${part_y}_${c_o}_${dim}_r${r}.log
  done

  popd
}

# 1250 * 1250 * 256 = 10000 * 10000 * 4
# run domain_x domain_y tile part_x part_y c_o dim
run 	1	256	1500	1	16	 o 	 1 
run 	1	256	1500	4	4	 c 	 1 
run 	2	128	1500	1	16	 o 	 1 
run 	2	128	1500	4	4	 c 	 1 
run 	4	64	1500	1	16	 o 	 1 
run 	4	64	1500	4	4	 c 	 1 
run 	8	32	1500	2	8	 o 	 1 
run 	8	32	1500	4	4	 c 	 1 
run 	16	16	1500	4	4	 o 	 1 
run 	16	16	1500	4	4	 o 	 2 
run 	16	16	1500	4	4	 c 	 1 
run 	32	8	1500	8	2	 o 	 1 
run 	32	8	1500	8	2	 o 	 2 
run 	32	8	1500	4	4	 c 	 1 
run 	64	4	1500	16	1	 o 	 1 
run 	64	4	1500	4	4	 c 	 1 
run 	128	2	1500	16	1	 o 	 1 
run 	128	2	1500	4	4	 c 	 1 
run 	256	1	1500	16	1	 o 	 1 
run 	256	1	1500	4	4	 c 	 1 
