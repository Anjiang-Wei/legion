Task * GPU,CPU; # for any task, run on GPU if supported

Region * * GPU FBMEM; # for any task, any region, if mapped onto GPU, use FBMEM as default
Region * * CPU SYSMEM; # if mapped onto CPU, use SYSMEM as default

# for $task, $region, $mem_type, specify $list_of_layout_constraints
Layout * * * SOA C_order; # Other choices: AOS F_order Exact Align==128 Compact

mcpu = Machine(CPU);
mgpu = Machine(GPU);

def linearcyclic(Task task) {
    return mgpu[task.ipoint[0] % mgpu.size[0], task.ipoint[0] / mgpu.size[0]];
}

def cyclic_shard_cpu(Task task) {
    return mcpu[task.ipoint[0] % mgpu.size[0], 0]; # only one CPU
}

# IndexTaskMap init_mesh_zones,init_side_fracs,init_hydro                     linearcyclic;
# IndexTaskMap init_radial_velocity,init_step_zones,init_step_points          linearcyclic;
# IndexTaskMap calc_centers,calc_centers_full,calc_volumes,calc_volumes_full  linearcyclic;
# IndexTaskMap adv_pos_half,calc_rho_half,calc_state_at_half,calc_char_len    linearcyclic;
# IndexTaskMap sum_point_mass,calc_force_pgas_tts,qcs_zone_center_velocity    linearcyclic;
# IndexTaskMap qcs_corner_divergence,qcs_qcn_force                            linearcyclic;
# IndexTaskMap initialize_topology,init_pointers                              cyclic_shard_cpu;
# Proposal: IndexTaskMap GPU linearcyclic;
# IndexTaskMap CPU cyclic_shard_cpu;